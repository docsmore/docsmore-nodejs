/**
 * DOCSMOREAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

'use strict';

const _request = require('../Http/Client/RequestClient');
const _configuration = require('../configuration');
const _apiHelper = require('../APIHelper');
const _baseController = require('./BaseController');

class OAUTHTOKENController {
    /**
     * Obtaining an Auth Token is the first thing in the process. The lifetime of Auth token is
     * configurable in the developer portal depending upon your need. Once auth token is obtained,
     * all the follow up API calls will need to include auth token in the header. FaIlure to do
     * so would result in response with 401 Unauthorized Access.
     * Under Your Developer Account - Go to Api Setting and you will screen similar to below.
     * <img src="https://www.docsmore.com/wp-content/uploads/2018/02/apikey-screen.png" alt="alt
     * text" title="Title" />
     * Make sure you call this in server side code. Exposing apiKey and clientSecret is a not a
     * good idea on front end and can lead up to security vulnerabilities.
     *
     * @param {GetOAuthTOKENRequest} body TODO: type description here
     * @param {string} accept TODO: type description here
     * @param {string} contentType TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static createGetOAuthTOKEN(body, accept, contentType, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.getBaseUri();

        const _queryBuilder = `${_baseUri}${'/oauth/token'}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            'content-type': 'application/json; charset=utf-8',
            Accept: accept,
            'Content-Type': contentType,
        };

        // remove null values
        _apiHelper.cleanObject(body);

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            headers: _headers,
            body: _apiHelper.jsonSerialize(body),
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, null, _context);
                    _fulfill();
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }

}

module.exports = OAUTHTOKENController;
